package runtimeComplexityIsPrime;

import java.util.Scanner;

public class Solution {
    
    /* See if we have a prime number */
    public static boolean isPrime(int testNumber) {
        /* Is the number less than 2? */
        if (testNumber < 2) {
            /* Not prime, return false */
            return false;
        }
        /* Is the number 2 */
        if (testNumber == 2) {
            /* 2 is a prime number */
            return true;
        }
        /* Is the number a multiple of 2? */
        if (testNumber % 2 == 0) {
            /* Divisible by 2, not prime, return false */
            return false;
        }
        /* Since primes come in pairs, we don't need to test anything above the sqrt of the number */
        int limit = (int) Math.sqrt(testNumber);
        /* Start at 3, and go up to the square root, only testing odd numbers for primes */
        for (int i=3; i<limit; i+=2) {
            if (testNumber % i == 0) {
                /* It is divisible; so not prime, return false */
                return false;
            }
        }
        /* We tried everything; so it must be prime, return true */
        return true;    
    }

    public static void main(String[] args) {
        /* Instantiate a Scanner to read standard input */
		Scanner stdIn = new Scanner(System.in);

		/* Read the number of test cases */
		int testCases = stdIn.nextInt();
        //System.out.println("Test Cases: " + testCases);
        
        /* Loop thru the test cases */
        for (int i = 0; i < testCases; i++) {
            /* Read the next number to test */
            int testNumber = stdIn.nextInt();
            //System.out.println("Testing: " + testNumber);
            
            /* Is the number prime? */
            if (isPrime(testNumber)) {
                /* Yes, the number is prime */
                System.out.println("Prime");
            } else {
                /* Nope, not prime */
                System.out.println("Not prime");
            }
        }
    }
}