package sortingAlgorithms;

/*
 * Selection Sort
 * 
 * The selection sort is a combination of searching and sorting. During each pass,
 * the unsorted element with the smallest (or largest) value is moved to its proper
 * position in the array. The number of times the sort passes through the array is
 * one less than the number of items in the array. In the selection sort, the inner
 * loop finds the next smallest (or largest) value and the outer loop places that
 * value into its proper location.
 * 
 * Selection sort is not difficult to analyze compared to other sorting algorithms
 * since none of the loops depend on the data in the array. Selecting the lowest
 * element requires scanning all n elements (this takesn - 1 comparisons) and then
 * swapping it into the first position. Finding the next lowest element requires
 * scanning the remaining n - 1 elements and so on,
 * for (n - 1) + (n - 2) + ... + 2 + 1 = n(n - 1) / 2 ~= O(n2) comparisons. Each
 * of these scans requires one swap for n - 1 elements. -
 * See more at: http://www.java2novice.com/java-sorting-algorithms/selection-sort/#sthash.BBW81wWf.dpuf
 * 
 */

/* Perform a selection sort on an array of integers */
public class SelectionSort {

	/* Define a global debug level variable */
	/* debug = 0, normal mode, no debug output */
	/* debug = 1, print out intermediate results */
	/* debug = 2, print out detailed intermediate results */
	public static int debug = 0;

	/* Array to be sorted */
	public int[] sortArray;

	/* Constructor for the selection sort */
	SelectionSort(int[] sortArrayIn) {
		/* Make a copy of the data to be sorted */
		this.sortArray = sortArrayIn;
	}

	/* Getters and Setters */
	/* Get the sort array */
	public int[] getSortArray() {
		return sortArray;
	}

	/* Set a new sort array */
	public void setSortArray(int[] sortArrayIn) {
		sortArray = sortArrayIn;
	}

	/* Swap two numbers in the sorted array */
	public void swapNumbers(int index1, int index2) {

		int temp;

		if (debug > 1) {
			System.out.println("Swapping array[" + index1 + "]=" + sortArray[index1] + " > sortArray[" + index2 + "]="
					+ sortArray[index2]);
		}

		/* Store the first value to be swapped */
		temp = this.sortArray[index1];
		/* Move the second value into the first values location */
		this.sortArray[index1] = this.sortArray[index2];
		/* Put the first value into the second values location */
		this.sortArray[index2] = temp;
	}

	/* Print the numbers in the array */
	public void printNumbers() {

		/* Loop thru the numbers in the array */
		for (int i = 0; i < this.sortArray.length; i++) {
			/* Print out the value at index i of the array */
			System.out.print(this.sortArray[i] + ", ");
		}
		/* Skip to a new line after printing */
		System.out.println();
	}

	/* Do a bubble sort on the sortArray */
	public void sort() {
		/* Store the array length */
		int arrayLength = this.sortArray.length;
		
		if (debug > 0) {
			System.out.println("Intermediate results");
		}
		
		for (int i = 0; i < sortArray.length - 1; i++)
        {
            int index = i;
            for (int j = i + 1; j < sortArray.length; j++)
                if (sortArray[j] < sortArray[index])
                    index = j;
      
            int smallerNumber = sortArray[index]; 
            sortArray[index] = sortArray[i];
            sortArray[i] = smallerNumber;
        }
        return;
        /*		
		
		 * Scan the array from the end to the beginning searching/swapping out
		 * of order Index
		 
		for (int maxIndex = arrayLength; maxIndex >= 0; maxIndex--) {
			if (debug > 1) {
				System.out.println("maxIndex=" + maxIndex);
			}
			 Have we done a swap in this pass 
			boolean swapThisPass = false;
			
			 * Scan the array from the beginning to the maxIndex needing
			 * swapping out of order elements
			 
			
			 * Note, with each pass, the maximum value will bubble to the top;
			 * so we don't need to sort that value again
			 
			for (int index = 0; index < maxIndex - 1; index++) {
				 nextIndex is the index after index 
				nextIndex = index + 1;
				 If the elements are out of order, swap them 
				if (this.sortArray[index] > this.sortArray[nextIndex]) {
					 Swap the index, and nextIndex values in the sortArray 
					swapNumbers(index, nextIndex);
					
					 * We have done at least one swap this pass; so keep
					 * testing, until no swaps in a pass
					 
					swapThisPass = true;
				}
				if (debug > 1) {
					System.out.print("maxIndex=" + maxIndex + ", index=" + index + ", array=");
					printNumbers();
				}
			}
			
			 * If we scanned the entire array, with no swaps, then it is sorted,
			 * and we can stop
			 
			if (!swapThisPass) {
				
				 * The array is sorted, break out of this loop, so no more
				 * passes
				 
				break;
			}
			if (debug > 0) {
				printNumbers();
			}
		}
		if (debug > 0) {
			System.out.println();
		}*/
	}
}
