package sortingAlgorithms;

import java.util.Scanner;

/* Group of Java sorting algorithms for an integer array */
public class SortingAlgorithms {
  
    public static void main(String[] args) {
    	
    	/* Create an Scanner instance for reading standard input */
    	Scanner stdIn = new Scanner(System.in);
    	
    	/* Do you want to enter the numbers to sort, or use a standard data set */
    	System.out.println("Enter the number of numbers to sort, or -1 to use a default data set");
    	int numberSorted = stdIn.nextInt();
    	
    	/* if numbers to sort is negative, create a standard data set */
    	if (numberSorted < 1) {
    	/* Create in array to be sorted */
        int[] input = { 4, 2, 9, 6, 23, 12, 34, 0, 1 };
    	} else {
    		/* Create a new integer array to hold the numbers to sort */
    		int [] input = new int[numberSorted];
    		/* Read all the numbers to sort */
    		for (int i=0; i<numberSorted; i++) {
    			/* Read the next number into the array */
    			input[i] = stdIn.nextInt();
    		}
    	}
        
        /* Time variables to compute elapsed time for a sort */
        long timeBefore, timeAfter, timeDelta;
       
        /* Create a new instance of the bubble sort class, to sort the input */
        BubbleSort bubble = new BubbleSort(input);
        System.out.println("Original array");
        bubble.printNumbers();
        System.out.println();
        
        /* Store the time before the sort */
        timeBefore = System.nanoTime();
        bubble.sort();
        /* Read the time after the sort */
        timeAfter = System.nanoTime();
        
        System.out.println("Bubble Sorted Array");
        bubble.printNumbers();
        System.out.println("Time to complete sort in milliseconds = " + (timeAfter - timeBefore)/1000);
  
    }

}
