package linkedListRemoveDuplicates;

import java.util.Scanner;

/* Declare a Node class for nodes of the Linked List */
class Node {
	/* Declare the instance variables */
	/* Data for the node */
	int data;
	/* Pointer to the next node */
	Node next;

	/* Constructor for the Node class */
	Node(int newData) {
		/* Initialize the Node's data with newData */
		data = newData;
		/* Initialize the node pointing to nothing */
		next = null;
	}
}

public class Solution {

	public static Node removeDuplicates(Node head) {
		/* Another reference to head */
		Node current = head;

		/* Pointer to store the next pointer of a node to be deleted */
		Node next_next;

		/* do nothing if the list is empty */
		if (head == null)
			return head;

		/* Traverse list till the last node */
		while (current.next != null) {

			/* Compare current node with the next node */
			if (current.data == current.next.data) {
				next_next = current.next.next;
				current.next = null;
				current.next = next_next;
			} else // advance if no deletion
				current = current.next;
		}
		return head;

	}
	
	/* Insert a node in the tree, with data newData, at node root */
	public static Node insert(Node head, int newData) {
		/* Create a new Node with the newData */
		Node newNode = new Node(newData);
		
		/* If we have an empty list, return the new Node */
		if (head == null) {
			head = newNode;
			/* If the next node is null, point this node at the next node */
		} else if (head.next == null) {
			/* Point this node at the next */
			head.next = newNode;
		} else {
			/* Scan the linked list for the end of the list, starting from the head */
			Node nextNode = head;
			while (nextNode.next != null) {
				/* Go to the next node */
				nextNode = nextNode.next;
			}
			/* Insert the new node in the last node of the list */
			nextNode.next = newNode;
		}
		/* Return the head of the list */
		return head;
	}
	
	/* Display the linked list */
	public static void display(Node head) {
		/* Scan thru the list from the head */
		Node nextNode = head;
		/* Loop until there are no more nodes */
		while (nextNode != null) {
			/* Print out the data for this node */
			System.out.print(nextNode.data + " ");
			/* Advance to the next node in the list */
			nextNode = nextNode.next;
		}
	}

	public static void main(String[] args) {
		/* Instantiate a Scanner to read standard input */
		Scanner stdIn = new Scanner(System.in);

		/* Read the number of data nodes */
		int numDataNodes = stdIn.nextInt();

		/* Start with an empty list */
		Node root = null;

		/* Read all the data nodes */
		while (numDataNodes-- > 0) {
			/* Read the next data node */
			int newData = stdIn.nextInt();
			/* Insert the newData into the tree */
			root = insert(root, newData);
		}

		/* Remove the duplicate nodes from the list */
		root = removeDuplicates(root);
		
		/* Display the results */
		display(root);
	}

}
