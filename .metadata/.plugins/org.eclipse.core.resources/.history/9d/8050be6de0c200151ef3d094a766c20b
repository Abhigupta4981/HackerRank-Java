package genericBinaryTree;

public class GenericBinaryTree<inputType extends Comparable<inputType>> {
		
	// Root node pointer. Will be null for an empty tree.
	private Node<inputType> root=null;

	/*
	 * --Node-- The binary tree is built using this nested node class. Each node
	 * stores one data element, and has left and right sub-tree pointer which
	 * may be null. The node is a "dumb" nested class -- we just use it for
	 * storage; it does not have any methods.
	 */
	private static class Node<inputType extends Comparable<inputType>>
			implements Comparable<Node<inputType>> {
		Node<inputType> left;
		Node<inputType> right;
		inputType data;

		/*
		 * Constructor for the Node Class, initialize the data, and both right
		 * and left pointers null
		 */
		Node(inputType newData) {
			left = null;
			right = null;
			data = newData;
		}
		
		/* Getters and Setters */
		/* Get the data for the node */
		public inputType getData() {
			/* Return the data for this node */
			return data;
		}
		
		/* Set the data for this node */
		public void setData(inputType newData) {
			/* Set the data for this node to newData */
			data = newData;
		}

		@Override
		public int compareTo(Node<inputType> that) {
			/* Compare the data for the two nodes and return the comparison */
			return this.getData().compareTo(that.getData());
		}
	}

	/**
	 * Creates an empty binary tree -- a null root pointer.
	 */
	/* Constructor for the GenericBinaryTree class */
	public void GenericBinaryTree() {
		/* Start with an empty tree */
		root = null;
	}

	/**
	 * Returns true if the given target is in the binary tree. Uses a recursive
	 * helper.
	 */
	public boolean lookup(inputType data) {
		/* Do the lookup recursively, starting at the root */
		return (lookup(root, data));
	}

	/**
	 * Recursive lookup -- given a node, recur down searching for the given
	 * data.
	 */
	private boolean lookup(Node<inputType> node, inputType data) {
		/* If we have reached the end of the tree, return false */
		if (node == null) {
			/* No data match on this branch */
			return (false);
		}

		/* Does the data for this node match the search data */
		if (data == node.data) {
			/* Match!! return true */
			return (true);
			/* Is the search data is less than the node data */
		} else if (data < node.data) {
			/* Search the left node */
			return (lookup(node.left, data));
		} else {
			/*
			 * The search data is greater than the node data; so search the
			 * right node
			 */
			return (lookup(node.right, data));
		}
	}

	/**
	 * Inserts the given data into the binary tree. Uses a recursive helper.
	 */
	public void insert(int data) {
		root = insert(root, data);
	}

	/**
	 * Recursive insert -- given a node pointer, recur down and insert the given
	 * data into the tree. Returns the new node pointer (the standard way to
	 * communicate a changed pointer back to the caller).
	 */
	private Node insert(Node node, int data) {
		if (node == null) {
			node = new Node(data);
		} else {
			if (data <= node.data) {
				node.left = insert(node.left, data);
			} else {
				node.right = insert(node.right, data);
			}
		}

		return (node); // in any case, return the new pointer to the caller
	}


}
