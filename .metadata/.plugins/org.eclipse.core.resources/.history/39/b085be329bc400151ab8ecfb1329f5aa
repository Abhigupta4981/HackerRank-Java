package hangManApplication;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;

public class HangMan {

	/* Declare some properties */
	String mysteryWord;		/* The word the user needs to guess */
	StringBuilder currentGuess;	/* Add the guessed characters by building a string */
	/* Characters guessed */
	ArrayList<Character> previousGuesses = new ArrayList<Character>();
	/* Maximum allowable tries */
	int maxTries = 6;
	/* Current Try */
	int currentTry = 0;
	/* Our dictionary of possible mystery words */
	ArrayList<String> dictionary = new ArrayList<String>();
	/* Access an external file of words */
	private static FileReader fileReader;
	private static BufferedReader bufferedFileReader;
	
	/* Constructor for Hangman */
	public HangMan() throws IOException {
		/* Read the file */
		initializeStreams();
		/* Pick a mystery word */
		mysteryWord = pickWord();
		/* Initialize the current Guess */
		currentGuess = initializeCurrentGuess();
	}

	private void initializeStreams() throws IOException {
		try {
			/* Open the file dictionary.txt, and create a file reader and buffered file reader */
			File inFile = new File("dictionary.txt");
			fileReader = new FileReader(inFile);
			bufferedFileReader = new BufferedReader(fileReader);
			
			/* Read the first line of the file */
			String currentLine = bufferedFileReader.readLine();
			
			/* Loop thru the file, until the end of the file */
			while(currentLine != null) {
				/* Add the current line to the dictionary */
				dictionary.add(currentLine);
				/* Read the next line of the file */
				currentLine = bufferedFileReader.readLine();
			}
			/* Close the file reader and buffered file readers */
			bufferedFileReader.close();
			fileReader.close();
		} catch(IOException exception) {
			System.out.println("Could not read the dictionary");
		}
	}
	
	/* Return a random word from the dictionary */
	private String pickWord() {
		/* Generate a random number */
		Random rand = new Random();
		
		/* Find the index of the mystery word randomly in the dictionary */
		int wordIndex = Math.abs(rand.nextInt()) % dictionary.size();
		/* Return the mystery Word */
		return dictionary.get(wordIndex);
	}
	
	/* Build a string like: _ A _ _ _ _ _, where each _ is a character to guess. */
	private StringBuilder initializeCurrentGuess() {
		/* Create a StringBuilder instance */
		StringBuilder current = new StringBuilder();
		/* Loop thru 2*length of the mystery word (spaces between characters) */
		for (int i=0; i < mysteryWord.length() * 2; i++) {
			/* If even index i, add an _ for another character */
			if (i % 2 == 0) {
				current.append("_");
			} else {
				current.append(" ");
			}
		}
		
		/* Return the current guess string */
		return current;
	}

	
}
