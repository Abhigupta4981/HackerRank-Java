package stackQueue;

/* Create an abstract integer Stack or Queue class */
public abstract class StackQueueInt {
	/* Declare a node of the linked list containing the stack */
	class Node {
		/* Instance variables for the Node class */
		int data;
		Node next;
		
		/* Constructor for the Node Class */
		Node(int dataIn) {
			/* Initialize the data, with the incoming data */
			data = dataIn;
			/* Initialize the next pointer to null */
			next = null;
		}
	}
	
	/* Pointers to the head and tail of the Stack/Queue */
	Node head = null;
	Node tail = null;
	
	/* Constructor for the Stack/Queue Class */
	StackQueueInt() {
		/* Not much to do here */
	}

	/* Is the Stack/Queue empty? */
	public boolean isEmpty() {
		/* Return true, if the head pointer is null */
		return (head == null);
	}
	
	/* Print out the list */
	public void print() {
		/* Print the opening bracket of the printout */
		System.out.print("[");
		
		/* Scan thru the list from the head */
		Node listPtr = head;
		while (listPtr != null) {
			/* Print the data */
			System.out.print(listPtr.data);
			/* If not at the end of the list, print a , space for the next item*/
			if (listPtr.next != null) {
				System.out.print(", ");
			}
			/* Advance to the next element in the linked list */
			listPtr = listPtr.next;
		}
		
		/* Print the closing bracket */
		System.out.println("]");
		
	}
}
